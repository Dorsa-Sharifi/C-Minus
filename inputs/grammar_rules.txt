Program -> DeclarationList
DeclarationList -> Declaration DeclarationList
DeclarationList -> epsilon
Declaration -> DeclarationInitial DeclarationPrime
DeclarationInitial -> TypeSpecifier #Push_ID ID
DeclarationPrime -> FunDeclarationPrime
DeclarationPrime -> VarDeclarationPrime
VarDeclarationPrime -> ; #Add_Var_SS
VarDeclarationPrime -> [ #Push_Num NUM ] ; #Create_Arr
FunDeclarationPrime -> #Params_Declaration ( Params ) #Func_Beginning #Search_For_Return CompoundStmt #Found_Return #Return_Main #Func_Ending
TypeSpecifier -> int
TypeSpecifier -> void
Params -> int #Push_ID ID #Add_Var_SS ParamPrime ParamList
Params -> void
ParamList -> , Param #Add_Var_SS ParamList
ParamList -> epsilon
Param -> DeclarationInitial ParamPrime
ParamPrime -> #Array_Args [ ]
ParamPrime -> epsilon
CompoundStmt -> #Next_Scope { DeclarationList StatementList } #Prev_Scope
StatementList -> Statement StatementList
StatementList -> epsilon
Statement -> ExpressionStmt
Statement -> CompoundStmt
Statement -> SelectionStmt
Statement -> IterationStmt
Statement -> ReturnStmt
ExpressionStmt -> Expression ; #Remove_Data_From_SS
ExpressionStmt -> break ; #End_of_Loop_Break
ExpressionStmt -> ;
SelectionStmt -> if ( Expression ) #Save Statement ElseStmt
ElseStmt -> #Jump endif
ElseStmt -> else #Jpf_Save Statement #Jump endif
IterationStmt -> while #Label ( Expression ) #New_Break #Save Statement #While_Jumps #Return_Scope_with_Break
ReturnStmt -> return ReturnStmtPrime #Save_Return_Point
ReturnStmtPrime -> #Push_Index ;
ReturnStmtPrime -> Expression ;
Expression -> SimpleExpressionZegond
Expression -> #Push_ID_Addr ID B
B -> = Expression #Assignment
B -> [ Expression ] #Array_Indices H
B -> SimpleExpressionPrime
H -> = Expression #Assignment
H -> G D C
SimpleExpressionZegond -> AdditiveExpressionZegond C
SimpleExpressionPrime -> AdditiveExpressionPrime C
C -> #Pop_Relation Relop AdditiveExpression #Save_Operation
C -> epsilon
Relop -> <
Relop -> ==
AdditiveExpression -> Term D
AdditiveExpressionPrime -> TermPrime D
AdditiveExpressionZegond -> TermZegond D
D -> #Pop_Relation Addop Term D #Save_Operation
D -> epsilon
Addop -> +
Addop -> -
Term -> SignedFactor G
TermPrime -> SignedFactorPrime G
TermZegond -> SignedFactorZegond G
G -> #Pop_Relation Mulop SignedFactor #Multiply_Division G
G -> epsilon
Mulop -> *
Mulop -> /
SignedFactor -> + Factor
SignedFactor -> - Factor #Negative
SignedFactor -> Factor
SignedFactorPrime -> FactorPrime
SignedFactorZegond -> + Factor
SignedFactorZegond -> - Factor #Negative
SignedFactorZegond -> FactorZegond
Factor -> ( Expression )
Factor -> #Push_ID_Addr ID VarCallPrime
Factor -> #Push_Num NUM
VarCallPrime -> ( Args #Func_Output ) #Func_Call
VarCallPrime -> VarPrime
VarPrime -> [ Expression ] #Array_Indices
VarPrime -> epsilon
FactorPrime -> ( Args #Func_Output ) #Func_Call
FactorPrime -> epsilon
FactorZegond -> ( Expression )
FactorZegond -> #Push_Num NUM
Args -> ArgList
Args -> epsilon
ArgList -> Expression ArgListPrime
ArgListPrime -> , Expression ArgListPrime
ArgListPrime -> epsilon
